{"version":3,"sources":["redux/action-types.ts","redux/store.ts","redux/reducers.ts","components/common/Loading2.tsx","serviceWorker.ts","components/common/Loading.tsx","components/common/Loadable.tsx","Entry.tsx","index.tsx"],"names":["USER_DATA","REMOVE_USER_DATA","store","createStore","state","user","action","temp","type","data","composeWithDevTools","applyMiddleware","thunk","stylePrefix","Loading2","backgroundColor","className","style","Boolean","window","location","hostname","match","Loading","props","error","timedOut","onClick","retry","pastDelay","width","height","Loadable","L","loading","delay","timeout","loginPage","loader","homePage","Entry","path","component","to","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qHAAA,oEAGO,IAAMA,EAAY,YAGZC,EAAmB,oB,uECD1BC,EAAQC,uBCEP,WAMJ,IALCC,EAKF,uDAL4C,CAAEC,KAAM,MAClDC,EAIF,uCACMC,EAAOH,EACX,OAAQE,EAAOE,MACX,KAAKR,IAED,OADAO,EAAKF,KAAOC,EAAOG,KACZF,EACX,KAAKN,IAED,OADAM,EAAKF,KAAO,KACLE,EACX,QACI,OAAOH,KDjBfM,8BAAoBC,0BAAgBC,OAGzBV,O,gCETf,sDAGMW,GAHN,MAGoB,mBAML,SAASC,EAAT,GAAgE,IAAD,IAA3CC,uBAA2C,MAAzB,OAAyB,EAC1E,OACI,yBACIC,UAAS,UAAKH,EAAL,WACTI,MAAO,CACHF,gBAAkBA,IAGtB,yBAAKC,UAAS,UAAKH,EAAL,iBAAyBA,EAAzB,aACd,yBAAKG,UAAS,UAAKH,EAAL,iBAAyBA,EAAzB,aACd,yBAAKG,UAAS,UAAKH,EAAL,iBAAyBA,EAAzB,aACd,yBAAKG,UAAS,UAAKH,EAAL,iBAAyBA,EAAzB,aACd,yBAAKG,UAAS,UAAKH,EAAL,iBAAyBA,EAAzB,gB,gKCTNK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qECQSC,EAxBC,SAACC,GAMb,OAAIA,EAAMC,OAICD,EAAME,SAFT,4BAAQC,QAASH,EAAMI,OAAvB,4BAIGJ,EAAMK,UACN,yBAAKZ,MAAO,CACfa,MAAO,OACPC,OAAQ,SAER,kBAACjB,EAAA,EAAD,OAGG,MCXAkB,EARE,SAACR,GAAD,OACfS,IAAE,aACAC,QAASX,EACTY,MAAO,IACPC,QAAS,KACNZ,K,6CCGDa,EAAYL,EAAS,CACvBM,OAAQ,kBAAM,uDAGZC,EAAWP,EAAS,CACtBM,OAAQ,kBAAM,8DAIGE,E,uKAEb,OACI,kBAAC,IAAD,CAAUtC,MAAOA,KACb,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOuC,KAAK,QAAQC,UAAWH,IAC/B,kBAAC,IAAD,CAAUrC,MAAOA,KACb,kBAAC,IAAD,CAAOuC,KAAK,SAASC,UAAWL,KAEpC,kBAAC,IAAD,CAAUM,GAAG,iB,GAVFC,aCdnCC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SJmIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,c","file":"static/js/main.13d50a12.chunk.js","sourcesContent":["// 包含所有 action type 的常量字符串\r\n\r\n// 传递登录用户的数据\r\nexport const USER_DATA = 'USER_DATA'\r\n\r\n// 退出登录，将redux中的数据删去\r\nexport const REMOVE_USER_DATA = 'REMOVE_USER_DATA'","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk';\r\nimport { transfromData } from './reducers'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n//生成store对象\r\nconst store = createStore(transfromData,\r\n    composeWithDevTools(applyMiddleware(thunk)) // 应用上异步中间件\r\n); // 内部会第一次调用reducer函数，得到初始state \r\n\r\nexport default store","// 包含n个ruducer函数的模块\r\nimport {\r\n    USER_DATA,\r\n    REMOVE_USER_DATA\r\n} from './action-types'\r\nimport { UserBasicConfig } from 'components/home/Header'\r\n\r\nexport function transfromData(\r\n    state: { user: UserBasicConfig | null } = { user: null },\r\n    action: {\r\n        data: UserBasicConfig\r\n        type: string\r\n    }\r\n) {\r\n    let temp = state\r\n    switch (action.type) {\r\n        case USER_DATA:\r\n            temp.user = action.data\r\n            return temp\r\n        case REMOVE_USER_DATA:\r\n            temp.user = null\r\n            return temp\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react'\r\nimport 'styles/common/loading2.scss'\r\n\r\nconst stylePrefix = 'common-loading2'\r\n\r\ninterface LoadingConfig {\r\n    backgroundColor?: string\r\n}\r\n// TODO: 需要修改loading样式\r\nexport default function Loading2({ backgroundColor = '#fff' }: LoadingConfig) {\r\n    return (\r\n        <div\r\n            className={`${stylePrefix}-layout`}\r\n            style={{\r\n                backgroundColor: (backgroundColor)\r\n            }}\r\n        >\r\n            <div className={`${stylePrefix}-item ${stylePrefix}-item-1`}></div>\r\n            <div className={`${stylePrefix}-item ${stylePrefix}-item-2`}></div>\r\n            <div className={`${stylePrefix}-item ${stylePrefix}-item-3`}></div>\r\n            <div className={`${stylePrefix}-item ${stylePrefix}-item-4`}></div>\r\n            <div className={`${stylePrefix}-item ${stylePrefix}-item-5`}></div>\r\n        </div>\r\n    )\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport Loading2 from './Loading2';\r\nconst Loading = (props: {\r\n    error: any;\r\n    retry: ((event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void) | undefined;\r\n    timedOut: any;\r\n    pastDelay: any;\r\n}) => {\r\n    if (props.error) {\r\n        return (\r\n            <button onClick={props.retry} >重新加载</button>\r\n        );\r\n    } else if (props.timedOut) {\r\n        return <button onClick={props.retry} >重新加载</button>\r\n    } else if (props.pastDelay) {\r\n        return <div style={{\r\n            width: '100%',\r\n            height: '100%'\r\n        }}>\r\n            <Loading2 />\r\n        </div>;\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nexport default Loading;","import L from \"react-loadable\";\r\nimport Loading from \"./Loading\";\r\n\r\nconst Loadable = (props: any) =>\r\n  L({\r\n    loading: Loading,\r\n    delay: 300,\r\n    timeout: 10000,\r\n    ...props,\r\n  });\r\n\r\nexport default Loadable;","import React, { Component } from 'react'\r\nimport Loadable from \"./components/common/Loadable\";\r\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom'\r\nimport 'antd/dist/antd.css'\r\nimport 'react-simple-verify/dist/react-simple-verify.css'\r\n\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\n\r\n// 异步分包处理\r\n\r\nconst loginPage = Loadable({\r\n    loader: () => import('./containers/LoginContainer'),\r\n});\r\n\r\nconst homePage = Loadable({\r\n    loader: () => import('./pages/home'),\r\n});\r\n\r\n// 前端路由\r\nexport default class Entry extends Component {\r\n    render() {\r\n        return (\r\n            <Provider store={store}>\r\n                <HashRouter>\r\n                    <Switch>\r\n                        <Route path='/home' component={homePage} />\r\n                        <Provider store={store}>\r\n                            <Route path='/login' component={loginPage} />\r\n                        </Provider>\r\n                        <Redirect to='/home' />\r\n                    </Switch>\r\n                </HashRouter>\r\n            </Provider>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Entry from 'Entry';\r\n\r\nReactDOM.render(\r\n  <Entry />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}